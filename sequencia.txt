cria um projeto vazio
	laravel new nome_do_projeto
configura o .env (cria o banco de dados se necessario)
altera o namespace padrao
	php artisan app:name NovoNamespace

Controllers:
criar um controller
	php artisan make:controller NomeDoController (vai para app\Controllers\) {deve ter os metodos em sintonia com a rota}
	depois de criado services, da pra alterar o controller pra usar os mesmos

Models:
    php artisan make:model NomeDoModel (-m pra criar a miration)
    colocar os models em app/Entities (por exemplo) (criar a pasta e ajustar o namespace do que precisar {models, factory, seeders, etc})

criar uma migration (melhor fazer ao criar o model)
	php artisan make:migration NomeDoModel -m (-m cria a migration)
	criar os campos do db na migration (cuidado aos tipos, deu erro com campo text que recebeu array na hora do seed)
rodar uma migration (cria os campos no db)
	php artisan migrate
	php artisan migrate:refresh --seed (recria tudo)
	talvez um composer dump-autoload

Factory / Seeds
criar dados fake na factory (duplicar metodo, ajustar e criar os fakers)
alterar a seed para gerar dados fake (em seeds\DatabaseSeeder)
	\Namespace\Model::truncate(); //truncate na tabela
    factory(\Namespace\Model::class, QTDE)->create(); //cria QTDE de registros
ou
criar um novo seeder
	php artisan make:seeder ModelSeeder
		\Namespace\Model::truncate(); //truncate na tabela
        factory(\Namespace\Model::class, QTDE)->create(); //cria QTDE de registros
    alterar em DatabaseSeeder
    	$this->call(NomeDoSeeder::class);
    rodar a seed: php artisan db:seed

Rotas:
	em app\routes.php (criar as rotas necessarias)
	{ Route::get('/point', 'NomeDoController@index'); }

Repository:
	sugerido: https://github.com/andersao/l5-repository
	criar a pasta app\Repositories (por exemplo)
	as classes tem que extends BaseRepository ( public function model(){return Model::class;} )
a arquitetura desenvolvida no curso requer uma interface, que vai requerir um service provider
	php artisan make:provider NamespaceRepositoryProvider
	fazer o bind no novo provider
	configura o provider em config/app.php { Prettus\Repository\Providers\RepositoryServiceProvider::class, }
	alterar os controllers se tiver algum pra alterar

Services:
	criar a pasta app\Services (por exemplo)
	migrar a regra de negocios do repository para o service

Entity
	php artisan make:entity
		cria a entity, o provider e o repository (tem que fazer o bind)

Validators:
	sugerido: https://github.com/andersao/laravel-validator
	criar a pasta app\Validators (por exemplo)

coisas do tinker (php artisan tinker)
para criar um registro
	$var = new Namespace\Model;
	$var->campo = "um valor";
	$var->save(); //salva o registro no banco
para criar um conjunto de dados no construtor:
	no model, criar protected $fillable = ['campo'] (colocar os campos aceitos no array)
	rodar: Namespace\Model::create(['campo' => 'valor',]);
para mostrar todos os registros:
	rodar: Namespace\Model::all();
para criar dados fake
	rodar factory('Namespace\Model', QTDE)->make(); //nao persiste
	rodar factory('Namespace\Model', QTDE)->create(); //persiste

----------------------------------
sequencia de um novo sei la
- migration (php artisan make:migration client_project_notes_tables --create project_notes)
	configura o arquivo gerado
	roda php artisan migrate
- criar a entity (php artisan make:entity NoteProject)
- configura a factory
- configura a seed
	php artisan migrate:refresh --seed
- atualiza o bind no provider
- criar ou atualizar o validator e o service

coisas gerais
desativar csrf:
	em app\Kernel.php:
		tirar \CodeProject\Http\Middleware\VerifyCsrfToken::class, de protected $middlewareGroups = ['web' => [
		colocar no manual: 'csrf' => \CodeProject\Http\Middleware\VerifyCsrfToken::class, em protected $routeMiddleware = [